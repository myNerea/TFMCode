import requests
import json
from utils.utils_idiomas import detectar_idioma_llm  # Aseg√∫rate de que est√° disponible

def traducir_desde_espanol_llm(texto, idioma_destino, modelo="llama3.2"):
    """
    Traduce un texto desde espa√±ol a otro idioma usando un LLM.
    Verifca que la salida este en el idioma deseado. En caso contrario salta un aviso.
    """
    prompt = (
        f"Por favor, traduce el siguiente texto del espa√±ol al idioma '{idioma_destino}' de forma precisa y natural. "
        f"Aseg√∫rate de que el resultado est√© 100% en '{idioma_destino}'. "
        "NO devuelvas ning√∫n texto en otro idioma. "
        "Solo devuelve la traducci√≥n, sin explicaciones, notas ni texto adicional. "
        "No incluyas comillas ni etiquetas, solo el texto traducido directamente.\n\n"
        f"{texto}"
    )

    data = {
        "model": modelo,
        "messages": [
            {
                "role": "system",
                "content": "Eres un traductor profesional. Solo proporcionas la traducci√≥n solicitada sin agregar nada m√°s."
            },
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post("http://localhost:11434/api/chat", json=data, stream=True)
        response.raise_for_status()

        traduccion = ""
        for line in response.iter_lines(decode_unicode=True):
            if line:
                try:
                    json_data = json.loads(line)
                    contenido = json_data.get("message", {}).get("content", "")
                    traduccion += contenido
                except json.JSONDecodeError:
                    pass

        # Devolvemos la traducci√≥n sin espacios por delante y por detr√°s.
        traduccion = traduccion.strip()

        # Devolvemos la traducci√≥n.
        print(f"üåç Traducci√≥n {traduccion}")
        # Validamos que el idioma detectado coincide con el destino.
        # Para ello, llamamos a la funci√≥n de detecci√≥n del idioma utilizada antes.
        info_validacion = detectar_idioma_llm(traduccion)
        # Intenta obtener el valor cuya clave del diccionario es idioma_detectado, si no la encuentra, devuelve
        # la cadena vacia.
        idioma_detectado = info_validacion.get("idioma_detectado", "")

        if idioma_detectado != idioma_destino:
            print(f"‚ö†Ô∏è Traducci√≥n fallida: se esperaba '{idioma_destino}', pero se detect√≥ '{idioma_detectado}'")

        # Devolvemos la traducci√≥n.
        return traduccion

    except Exception as e:
        print(f"‚ùå Error en traducci√≥n LLM: {e}")
        return texto


def traducir_respuesta(respuesta, idioma_destino, modelo="llama3.2"):
    """
    Llama a la funci√≥n para traducir la respuesta al idioma destino si este es distinto del espa√±ol.
    Si el idioma destino es 'espa√±ol', no se hace nada.
    """
    respuesta = respuesta.strip()
    # Si no se ha obtenido una respuesta o el idioma es espa√±ol, entonces se devuelve la respuesta
    if not respuesta or idioma_destino == "espa√±ol":
        print("‚úÖ El idioma original era el espa√±ol.")
        return respuesta
    # En caso de que el idioma de destino sea distinto del espa√±ol entonces llamamos al modelo para realizar
    # la traduccion
    return traducir_desde_espanol_llm(respuesta, idioma_destino, modelo=modelo)
